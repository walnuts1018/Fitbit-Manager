// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

func CreateRouter(ctx context.Context, cfg config.Config) (*gin.Engine, error) {
	psqldsn := cfg.PSQLDSN
	postgresClient, err := postgres.NewPostgres(ctx, psqldsn)
	if err != nil {
		return nil, err
	}
	usecaseUsecase, err := usecase.NewUsecase(postgresClient, postgresClient, postgresClient)
	if err != nil {
		return nil, err
	}
	resolver := graph.NewResolver(usecaseUsecase)
	engine, err := router.NewRouter(cfg, resolver)
	if err != nil {
		return nil, err
	}
	return engine, nil
}

// wire.go:

var ConfigSet = wire.FieldsOf(new(config.Config),
	"PSQLDSN",
)

var resolverSet = wire.NewSet(graph.NewResolver, wire.Bind(new(graph.ResolverRoot), new(*graph.Resolver)))

var postgresSet = wire.NewSet(postgres.NewPostgres, wire.Bind(new(usecase.ManifestSouceRepo), new(*postgres.PostgresClient)), wire.Bind(new(usecase.CRDRepo), new(*postgres.PostgresClient)), wire.Bind(new(usecase.SchemaRepo), new(*postgres.PostgresClient)))
